// state:
// - new_game
// - read_move
// - read_same_setup
// - no_move

Перем мПутьКФайлуНастроек;
Перем СообщениеПользователю;

Перем A; // Игровое поле
Перем A1;
Перем N;
Перем L;
Перем M;
Перем L1;
Перем M1;

Перем X;
Перем Y;

Перем H;
Перем I;
Перем J;
Перем J1;
Перем J2;
Перем K;
Перем K1;
Перем K2;

Перем Y9;
Перем N9;

Перем state;

Функция Index() Экспорт

	мПутьКФайлуНастроек = "appData.json";

    Если ЗапросHttp.Метод = "POST" Тогда // BSLLS-off
        ДанныеФормы = ЗапросHttp.ДанныеФормы;
		Y9 = ДанныеФормы["cli_input"]; // если введены данные, надо получить их
	КонецЕсли;

    СообщениеПользователю = ЗапуститьИгру();

    ДанныеВозврата = Новый Структура("msg", СообщениеПользователю);

    Возврат Представление(ДанныеВозврата);

КонецФункции

Функция ЗапуститьИгру()
    
	// Инициалиациия основных переменных
	A 	= Новый Массив(10, 20);
	A1 	= Новый Массив(10, 20);
	N	= Новый Массив(12);
	L	= Новый Массив(5);
	M	= Новый Массив(5);
	L1	= Новый Массив(5);
	M1	= Новый Массив(5);
	
	СообщениеИгроку = "";

    Если НЕ ЗначениеЗаполнено(Y9) И state <> "no_move"  Тогда
		state = "new_game";
		ЗаполнитьИгровоеПоле(СообщениеИгроку);
    Иначе
        // Игра продолжается
        ПолучитьСостояние();
		current_state = state;
		Если current_state = "read_move" Тогда
        	СделатьХод(СообщениеИгроку);
		ИначеЕсли current_state = "read_same_setup" Тогда
			N9 = Y9;
			ЗавершитьИгру(СообщениеИгроку);
		КонецЕсли;
    КонецЕсли;

	Если state <> "read_same_setup" Тогда
		ИгровоеПоле = "";
		СформироватьИгровоеПоле(ИгровоеПоле);
		СообщениеИгроку = ИгровоеПоле + Символы.ПС + СообщениеИгроку;
	КонецЕсли;

    ЗаписатьСостояние();

    Возврат СообщениеИгроку;

КонецФункции

Процедура СформироватьИгровоеПоле(ИгровоеПоле)
	
    Для D2 = 1 По 10 Цикл
        СтрокаПоля = "";
        Для B2 = 1 По 20 Цикл
            Симв = Символ(A[D2-1][B2-1]);
            СтрокаПоля = СтрокаПоля + Симв;
        КонецЦикла;
        ИгровоеПоле = ИгровоеПоле + СтрокаПоля + Символы.ПС + "    ";
    КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьИгровоеПоле(СообщениеИгроку)
	// GOTO 190
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	// Заполнение игрового поля
	Для B = 0 По 9 Цикл
		Для C = 0 По 19 Цикл
			X = Цел(ГСЧ.СлучайноеЧисло(0, 100)/10);
			Если X = 5 Тогда
				A[B][C] = КодСимвола("X");
			Иначе
				A[B][C] = КодСимвола(" ");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для D = 0 По 9 Цикл
		A[D][0] = КодСимвола("X");
		A[D][19] = КодСимвола("X");
	КонецЦикла;
	Для F = 0 По 19 Цикл
		A[0][F] = КодСимвола("X");
		A[9][F] = КодСимвола("X");
	КонецЦикла;
	РазместитьИгроков(СообщениеИгроку);
	
КонецПроцедуры

Процедура РазместитьИгроков(СообщениеИгроку)
   	// GOTO 420
	H = 0; I = 0;
	ПустоеПоле();
	A[H][I] = КодСимвола("*");
	J = H;
	K = I;
	Для N9 = 1 По 5 Цикл
		ПустоеПоле();
		A[H][I] = КодСимвола("+");
		L[N9-1] = H;
		M[N9-1] = I;
	КонецЦикла; // 480
	
	КопироватьДанные(СообщениеИгроку);
	
КонецПроцедуры

Процедура КопироватьДанные(СообщениеИгроку)

	// 490
	Для В1 = 1 По 10 Цикл
		Для В2 = 1 По 20 Цикл
			A1[В1-1][В2-1] = A[В1-1][В2-1];
		КонецЦикла;
	КонецЦикла;
	// 500
	Для В1 = 1 По 5 Цикл
		L1[В1-1] = L[В1-1];
		M1[В1-1] = M[В1-1];
	КонецЦикла;
	// 520
	J1 = J;
	K1 = K;
	
	Если state = "read_move" ИЛИ state = "read_same_setup" Тогда
		state = "read_move";
		Возврат;
	КонецЕсли;
	СделатьХод(СообщениеИгроку);

КонецПроцедуры

Процедура СделатьХод(СообщениеИгроку)

	Если state <> "read_move" И state <> "no_move" Тогда
		state = "read_move";
		Возврат;
	КонецЕсли;

	// Уже была введена команда для движения, можно обработать
	Если state = "no_move" Тогда
		state = "no_move";
	   	// GOTO 890
	    ОбработатьПоложениеИгрока(СообщениеИгроку);
	КонецЕсли;
	
	Попытка
		Y9 = Число(Y9);
	Исключение
		ДополнитьСообщение(СообщениеИгроку, "Wrong input!");
		Возврат;
	КонецПопытки;
	J2 = J;
	K2 = K;
	
	Если Y9 = 0 Тогда
		// THEN 860
		ДополнитьСообщение(СообщениеИгроку, "$6,000,000 JUMP!!!");
		ГСЧ = Новый ГенераторСлучайныхЧисел();
		J = Цел(2 + 8*ГСЧ.СлучайноеЧисло(0, 100)/100);
		K = Цел(2 + 8*ГСЧ.СлучайноеЧисло(0, 100)/100);
		ОбработатьПоложениеИгрока(СообщениеИгроку);
	ИначеЕсли Y9 < 0 Тогда
		// THEN 1230
		ДополнитьСообщение(СообщениеИгроку, "GIVE UP, EH.");
		ДополнитьСообщение(СообщениеИгроку, "*** YOU HAVE BEEN DESTROYED BY A LUCKY COMPUTER ***");
		ЗавершитьИгру(СообщениеИгроку);
	ИначеЕсли Y9 = 10 Тогда
		// THEN 1070
		state = "no_move";
		ПереместитьРоботов(СообщениеИгроку);
	КонецЕсли;
	
	Если state <> "read_move" Тогда
		Возврат;
	КонецЕсли;

	Если Y9 = 1 Тогда
		// 820
		J = J + 1;
		K = K - 1;
	ИначеЕсли Y9 = 2 Тогда
		// 800
		J = J + 1;
	ИначеЕсли Y9 = 3 Тогда
		// 780
		J = J + 1;
		K = K + 1;
	ИначеЕсли Y9 = 4 Тогда
		// 840
		K = K - 1;
	ИначеЕсли Y9 = 5 Тогда
		// 890
		Если A[J][K] = КодСимвола("X") Тогда
			// 1260
			ДополнитьСообщение(СообщениеИгроку, "HIGH VOLTAGE!!!!!!!!!!");
	    	ДополнитьСообщение(СообщениеИгроку, "***** ZAP *****  YOU'RE DEAD!!!|");
	    	ЗавершитьИгру(СообщениеИгроку);
		КонецЕсли;
	ИначеЕсли Y9 = 6 Тогда
		// 760
		K = K + 1;
	ИначеЕсли Y9 = 7 Тогда
		// 700
		J = J - 1;
		K = K - 1;
	ИначеЕсли Y9 = 8 Тогда                                       
		// 720
		J = J - 1;
	ИначеЕсли Y9 = 9 Тогда
		// 740
		J = J - 1;
		K = K + 1;
	КонецЕсли;
	
	Если state <> "read_move" Тогда
		Возврат;
	КонецЕсли;

	Если A[J][K] = КодСимвола("X") Тогда
		// 1260
		ДополнитьСообщение(СообщениеИгроку, "HIGH VOLTAGE!!!!!!!!!!");
    	ДополнитьСообщение(СообщениеИгроку, "***** ZAP *****  YOU'RE DEAD!!!|");
    	ЗавершитьИгру(СообщениеИгроку);
	КонецЕсли;
	
	Если state <> "read_move" Тогда
		Возврат;
	КонецЕсли;

	A[J2][K2] = КодСимвола(" ");
	A[J][K] = КодСимвола("*");
	// GOTO 1070
	
	// 1070
	ПереместитьРоботов(СообщениеИгроку);
	
	// INTERCEPTOR MOVEMENT

КонецПроцедуры

Процедура ЗавершитьИгру(СообщениеИгроку)
	
	Если state <> "read_same_setup" Тогда
		ДополнитьСообщение(СообщениеИгроку, "SAME SETUP (Y/N)");
		state = "read_same_setup";
		Возврат;
	КонецЕсли;

	Если N9 <> "Y" Тогда
		ЗаполнитьИгровоеПоле(СообщениеИгроку); // GOTO 190
	Иначе
		Для В1 = 1 По 10 Цикл
			Для В2 = 1 По 20 Цикл
				A[В1-1][В2-1] = A1[В1-1][В2-1];
			КонецЦикла;
		КонецЦикла;
		Для В1 = 1 По 5 Цикл
			L[В1-1] = L1[В1-1];
			M[В1-1] = M1[В1-1];
		КонецЦикла;
		J = J1;
		K = K1;
		state = "read_move";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереместитьРоботов(СообщениеИгроку)
	// 1070
	Для N9 = 0 По 4 Цикл
		X = L[N9];
		Y = M[N9];
		G9 = 0;
		// GOSUB 940
		Если A[X][Y] <> КодСимвола("X") Тогда
			X2 = X;
			Y2 = Y;
			X = SGN(J - X);
			Y = SGN(K - Y);
			X = X + X2;
			Y = Y + Y2;
			Если A[X][Y] = КодСимвола("*") Тогда
				G9 = 99;
			ИначеЕсли A[X][Y] = КодСимвола(" ") Тогда
				A[X][Y] = КодСимвола("+");
				A[X2][Y2] = КодСимвола(" ");
			Иначе
				A[X2][Y2] = КодСимвола(" ");
			КонецЕсли;
		КонецЕсли; // 1060
		
		Если G9 <> 0 Тогда // 1240
			Если state <> "read_same_setup" Тогда
				ДополнитьСообщение(СообщениеИгроку, "*** YOU HAVE BEEN DESTROYED BY A LUCKY COMPUTER ***");
				ЗавершитьИгру(СообщениеИгроку);
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			L[N9] = X;
			M[N9] = Y;
		КонецЕсли;
	КонецЦикла;
	
	Для N9 = 0 По 4 Цикл
		Если A[L[N9]][M[N9]] <> КодСимвола("X") Тогда
			Возврат;			
		КонецЕсли;
	КонецЦикла;
	
	// 1210
	ДополнитьСообщение(СообщениеИгроку, "YOU HAVE DESTROYED ALL YOUR OPPONENTS - THE GAME IS YOURS");
	ЗавершитьИгру(СообщениеИгроку);
	
КонецПроцедуры

Процедура ОбработатьПоложениеИгрока(СообщениеИгроку)

	Если A[J][K] = КодСимвола("X") Тогда
	    ДополнитьСообщение(СообщениеИгроку, "HIGH VOLTAGE!!!!!!!!!!");
	    ДополнитьСообщение(СообщениеИгроку, "***** ZAP *****  YOU'RE DEAD!!!|");
	    ЗавершитьИгру(СообщениеИгроку);
	Иначе
		A[J2][K2] = КодСимвола(" ");
		A[J][K] = КодСимвола("*");
		ПереместитьРоботов(СообщениеИгроку);		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьСостояние()

	ЗаписьJSON = Новый ЗаписьJSON;
	ПараметрыЗаписи = Новый ПараметрыЗаписиJSON();
	ЗаписьJSON.ОткрытьФайл(мПутьКФайлуНастроек,,,ПараметрыЗаписи) ;
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписатьМатрицуВJSON(ЗаписьJSON, "A", A);
	ЗаписатьМатрицуВJSON(ЗаписьJSON, "A1", A1);
	ЗаписатьМассивВJSON(ЗаписьJSON, "N", N);
	ЗаписатьМассивВJSON(ЗаписьJSON, "L", L);
	ЗаписатьМассивВJSON(ЗаписьJSON, "M", M);
	ЗаписатьМассивВJSON(ЗаписьJSON, "L1", L1);
	ЗаписатьМассивВJSON(ЗаписьJSON, "M1", M1);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "X", X);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "Y", Y);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "H", H);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "I", I);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "J", J);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "K", K);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "J1", J1);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "K1", K1);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "J2", J2);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "K2", K2);
	ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, "state", state);
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
КонецПроцедуры

Процедура ПолучитьСостояние()

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(мПутьКФайлуНастроек);
	
	ПрочитатьЗначениеМатрицыйИзJSON(ЧтениеJSON, "A", A);
	ПрочитатьЗначениеМатрицыйИзJSON(ЧтениеJSON, "A1", A1);
	ПрочитатьЗначениеМассиваИзJSON(ЧтениеJSON, "N", N);
	ПрочитатьЗначениеМассиваИзJSON(ЧтениеJSON, "L", L);
	ПрочитатьЗначениеМассиваИзJSON(ЧтениеJSON, "M", M);
	ПрочитатьЗначениеМассиваИзJSON(ЧтениеJSON, "L1", L1);
	ПрочитатьЗначениеМассиваИзJSON(ЧтениеJSON, "M1", M1);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "X", X);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "Y", Y);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "H", H);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "I", I);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "J", J);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "K", K);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "J1", J1);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "K1", K1);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "J2", J2);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "K2", K2);
	ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, "state", state);
	
	ЧтениеJSON.Закрыть();

КонецПроцедуры

Процедура ЗаписатьМатрицуВJSON(ЗаписьJSON, ИмяАтрибута, Матрица)
	
	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяАтрибута);
	ЗаписьJSON.ЗаписатьНачалоМассива();

	Для стр = 0 По Матрица.Количество() - 1 Цикл
        ЗаписьJSON.ЗаписатьНачалоМассива();
        Для кол = 0 По Матрица[стр].Количество() - 1 Цикл
			ЗаписьJSON.ЗаписатьЗначение(Матрица[стр][кол]);
        КонецЦикла;
        ЗаписьJSON.ЗаписатьКонецМассива();
    КонецЦикла;

	ЗаписьJSON.ЗаписатьКонецМассива();
	
КонецПроцедуры

Процедура ЗаписатьМассивВJSON(ЗаписьJSON, ИмяАтрибута, Массив)

	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяАтрибута);
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для индекс = 0 По Массив.Количество() - 1 Цикл
		ЗаписьJSON.ЗаписатьЗначение(Массив[индекс]);
	КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
		
КонецПроцедуры

Процедура ЗаписатьЗначениеПеременнойВJSON(ЗаписьJSON, ИмяАтрибута, Значение)

	ЗаписьJSON.ЗаписатьИмяСвойства(ИмяАтрибута);
	ЗаписьJSON.ЗаписатьЗначение(Значение);

КонецПроцедуры

Процедура ПрочитатьЗначениеМатрицыйИзJSON(ЧтениеJSON, ИмяАтрибута, Матрица)
	
	// Размеры матрицы: 10 х 20
	ЧтениеМатрицы = Ложь;
	КоличествоСтрок = 10;
	КоличествоСтолбцов = 20;
	стр = 0;
	кол = 0;
	Пока ЧтениеJSON.Прочитать() Цикл

		ТипЗначения = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если ЧтениеМатрицы Тогда
			Если ТипЗначения = ТипЗначенияJSON.Число Тогда
				// Это значение массива
				Матрица[стр][кол] = ЧтениеJSON.ТекущееЗначение;
				Если кол = (КоличествоСтолбцов - 1) Тогда
					кол = 0;
					стр = стр + 1;
				Иначе
					кол = кол + 1;
				КонецЕсли;
				Если стр = КоличествоСтрок Тогда
					Прервать;
				КонецЕсли;
			ИначеЕсли ТипЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
				// Началось другое свойство, надо остановить чтение
				ЧтениеМатрицы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗначения = ТипЗначенияJSON.ИмяСвойства И ЧтениеJSON.ТекущееЗначение = ИмяАтрибута Тогда
			ЧтениеМатрицы = Истина;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьЗначениеМассиваИзJSON(ЧтениеJSON, ИмяАтрибута, Массив)

	ЧтениеМассива = Ложь;
	индекс = 0;
	Пока ЧтениеJSON.Прочитать() Цикл

		ТипЗначения = ЧтениеJSON.ТипТекущегоЗначения;

		Если ЧтениеМассива Тогда
			Если ТипЗначения = ТипЗначенияJSON.Null Тогда
				индекс = индекс + 1;
				Если индекс = Массив.Количество() Тогда
					Возврат;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			Если ТипЗначения = ТипЗначенияJSON.Число Тогда
				// Это значение массива
				Массив[индекс] = ЧтениеJSON.ТекущееЗначение;
				индекс = индекс + 1;
				Если индекс = Массив.Количество() Тогда
					Возврат;
				КонецЕсли;
			ИначеЕсли ТипЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
				// Началось другое свойство, надо остановить чтение
				ЧтениеМассива = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗначения = ТипЗначенияJSON.ИмяСвойства И ЧтениеJSON.ТекущееЗначение = ИмяАтрибута Тогда
			ЧтениеМассива = Истина;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьЗначениеПеременнойИзJSON(ЧтениеJSON, ИмяАтрибута, Переменная)

	ЧтениеЗначения = Ложь;
	Пока ЧтениеJSON.Прочитать() Цикл

		ТипЗначения = ЧтениеJSON.ТипТекущегоЗначения;

		Если ЧтениеЗначения И ТипЗначения = ТипЗначенияJSON.Null Тогда
			Возврат;
		КонецЕсли;

		Если ЧтениеЗначения И (ТипЗначения = ТипЗначенияJSON.Число ИЛИ ТипЗначения = ТипЗначенияJSON.Строка) Тогда
			Переменная = ЧтениеJSON.ТекущееЗначение;
			Возврат;		
		КонецЕсли;

		Если ТипЗначения = ТипЗначенияJSON.ИмяСвойства И ЧтениеJSON.ТекущееЗначение = ИмяАтрибута Тогда
			ЧтениеЗначения = Истина;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ПустоеПоле()
	// 370
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	Повторять = Истина;
	Пока Повторять Цикл
		H = Цел(2 + 8*ГСЧ.СлучайноеЧисло(0, 100)/100);
		I = Цел(2 + 8*ГСЧ.СлучайноеЧисло(0, 100)/100);
		Повторять = A[H][I] <> КодСимвола(" ");
	КонецЦикла;

КонецПроцедуры

Функция Таб(Количество)

	Результат = "";
	Для Сч = 0 По Количество Цикл
		Результат = Результат + " "; 
   	КонецЦикла;
   	
   	Возврат Результат;

КонецФункции

Функция SGN(ВходящееЧисло)

	Если ВходящееЧисло > 0 Тогда
    	Возврат 1;
    ИначеЕсли ВходящееЧисло = 0 Тогда
    	Возврат 0;
    Иначе
    	Возврат -1;
    КонецЕсли;

КонецФункции

Процедура ДополнитьСообщение(СообщениеИгроку, Дополнение)
	СообщениеИгроку = СообщениеИгроку + Символы.ПС + "    " + Дополнение;
КонецПроцедуры